#To determine the class of a variable. Examples used from the HarvardX course & tal. 
class(total)


#To determine the structure of a data frame
str(murders)

#Show first six lines of a dataframe
head(murders)

#Length shows you how many rows of data there are
length(murders$population) 
#The above code will show you that there are 51 rows in the dataframe. 

#Factors are stored as categorical data
levels(murders$region) 
shows all the unique values of region. 

#Sorts in ascending order
sort(data$WhiteElo)
murders$state[order(murder_rate, descreasing = TRUE)]

#Get the index number which has the max value
> i_max <- which.max(data$WhiteElo)
> i_max
[1] 77
> data$White[i_max]
[1] "KeithGarrett"

#Add a new column to a data frame
murders <- mutate(murders, murder_rate = total/murders$population*1000000)

#Filter based on a condition
filter(murders, rate <0.71)

#Use the select statement
new_table <- select(murders, state, total)

#Use the pipe statement

murders %>% select(state, region, state) %>% filter(murders, rate < 0.71)

#Code to calculate Average
average <- mean(KID$WhiteElo)

#Code to calculate Standard Deviation
SD <- sd(KID$WhiteElo)

#Use of a simple ifelse
a <- ifelse(tal$White == "manshuv", "White", "Black")

#Use of a simple nested ifelse
Result_1 <- ifelse (tal$Result == "1/2-1/2", "Draw", 
+                 (ifelse(tal$White == "manshuv" &tal$Result == "1-0", "Won",
+                     (ifelse(tal$Black == "manshuv" & tal$Result == "0-1", "Won", "Lost")))))
#Remove a column from a dataframe
tal <- tal[,-53]

#Draw a normal curve
p9 <- ggplot(tal, aes(x = NMoves))+
+         stat_function (fun = dnorm, color = "red", args = list(mean = mean(tal$NMoves), sd = sd(tal$NMoves)))

#Create Percentile
female_percentile <- quantile(female, seq(.1, 0.9, 0.2))
> male_percentile <- quantile(male, seq(.1, 0.9, 0.2))

#ggplot cheatsheet
https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf

#Scatter Plot in gplot
murders %>% ggplot() + geom_point(aes(x=population/10^6, y = total_gun_murders))

p + geom_point(aes(population/10^6, total), size = 3) + geom_text(aes(population/10^6, total, label = abb))

p <- murders %>% ggplot(aes(population/10^6, total, label = abb))
> p+ geom_point(size = 3) + geom_text(nudge_x = 3)

#Murders graph
 p <- murders %>% ggplot(aes(population/10^6, total, label = abb))
> p+ geom_point(size = 3) + geom_text(nudge_x = 3)
> p+ geom_point(size = 3) + geom_text(nudge_x = 0.05) 
> p+ geom_point(size = 3) + geom_text(nudge_x = 0.05) + scale_x_log10() + scale_y_log10() + 
xlab("Population in millions(log scale)") + ylab("Total number of murders(log scale)") + ggtitle("US Gun Murders in 2019"))
+ geom_point(aes(col=region), size=3) + geom_abline(intercept = log10(r), lty = 2, color = "darkgrey")

#Heights dataframe piped to ggplot
 p <- heights %>% ggplot()

#Use group with geom_density
heights %>% 
  ggplot(aes(height, group = sex)) + geom_density()
  
  heights %>% 
  ggplot(aes(height, color = sex)) + geom_density()
  
  #Nested if with Danile and my games
player <- ifelse(botvinnik$White=="manshuv", "Manshu", (ifelse(botvinnik$Black=="manshuv", "Manshu", (ifelse(botvinnik$White=="Mr_Penings", "Daniel",(ifelse(botvinnik$Black=="Mr_Penings", "Daniel",  "Other")))))))

OppElo <- ifelse(botvinnik$White=="manshuv", botvinnik$BlackElo, ifelse(botvinnik$Black=="manshuv", botvinnik$WhiteElo,ifelse(botvinnik$White == "Mr_Penings", botvinnik$BlackElo, ifelse(botvinnik$Black=="Mr_Penings", botvinnik$WhiteElo, "0"))))
> botvinnik <- mutate(botvinnik, OppElo)

#Coerce a column to numeric
tal$OppElo<-as.numeric(as.character(tal$OppElo))
